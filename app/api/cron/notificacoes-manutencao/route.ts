import { NextResponse } from 'next/server';
import { db } from '@/lib/db/supabase';

export async function GET() {
  try {
    console.log('üîî Iniciando verifica√ß√£o de notifica√ß√µes de manuten√ß√£o...');
    
    // ‚úÖ CORRIGIDO: Apenas gerar notifica√ß√µes, N√ÉO tickets
    // Os tickets s√£o gerados pelo endpoint /api/cron/manutencao
    await db.criarNotificacoesEmLote([]);
    
    console.log('‚úÖ Notifica√ß√µes de manuten√ß√£o geradas com sucesso');
    
    return NextResponse.json({ 
      success: true, 
      message: 'Notifica√ß√µes de manuten√ß√£o geradas com sucesso',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Erro ao gerar notifica√ß√µes de manuten√ß√£o:', error);
    
    return NextResponse.json({ 
      success: false, 
      error: error instanceof Error ? error.message : 'Erro desconhecido',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

// Endpoint para testar manualmente
export async function POST() {
  try {
    console.log('üß™ Teste manual de notifica√ß√µes de manuten√ß√£o...');
    
    // Verificar cronogramas existentes
    const cronogramas = await db.getCronogramasManutencao();
    
    // Gerar notifica√ß√µes
    await db.gerarTicketsManutencao();
    
    console.log('‚úÖ Teste de notifica√ß√µes conclu√≠do com sucesso');
    
    return NextResponse.json({ 
      success: true, 
      message: 'Teste de notifica√ß√µes conclu√≠do',
      cronogramas_encontrados: cronogramas.length,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    
    return NextResponse.json({ 
      success: false, 
      error: error instanceof Error ? error.message : 'Erro desconhecido',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}